public class Node {
    public int value;
    public Node next;
    public Node prev;
}

public class DLL {

    public Node head;
    public Node tail;
    public int size;

    public Node create(int nodeValue) {
        head = new Node();
        Node node = new Node();
        node.value = nodeValue;
        node.next = null;
        node.prev = null;
        head = node;
        tail = node;
        size = 1;
        return head;

    }

    public void insert(int nodeValue, int location) {
        Node node = new Node();
        node.value = nodeValue;
        if (head == null) {
            create(nodeValue);
            return;
        } else if (location == 1) {
            node.next = head;
            head.prev = node;
            node.prev = null;
            head = node;
        } else if (location > size) {
            node.next = null;
            node.prev = tail;
            tail.next = node;
            tail = node;

        } else {
            Node tempNode = head;
            for (int i = 1; i < location - 1; i++) {
                tempNode = tempNode.next;
            }
            node.next = tempNode.next;
            node.prev = tempNode;
            tempNode.next = node;
            node.next.prev = node;
        }
        size = size + 1;
    }

    public void traverse() {
        Node tempNode = head;
        if (head == null) {
            System.out.println("Doubly Linked List Not Found");
        } else {
            System.out.print(head.value + "--->");
            for (int i = 1; i < size; i++) {
                tempNode = tempNode.next;
                System.out.print(tempNode.value);
                if (i != size - 1) {
                    System.out.print("--->");
                }
            }
            System.out.println("");
        }

    }

    public void revTraversal() {
        Node tempNode = tail;
        if (head == null) {
            System.out.println("Doubly Linked List Not Found");
        } else {
            System.out.print(tail.value + "<---");
            for (int i = size - 1; i > 0; i--) {
                tempNode = tempNode.prev;
                System.out.print(tempNode.value);
                if (i != 1) {
                    System.out.print("<---");
                }
            }
            System.out.println("");

        }
    }

    public boolean search(int nodeValue) {
        if (head != null) {
            Node tempNode = head;
            for (int i = 1; i < size; i++) {
                if (tempNode.value == nodeValue) {
                    System.out.println("Value found at location:" + (i));
                    return true;
                }
                tempNode = tempNode.next;

            }

        }
        System.out.println("Value not Found");
        return false;
    }

    public void delete(int location) {
        if (head != null) {
            if (location == 1) {
                head = head.next;
                head.next.prev = null;

                size = size - 1;
                System.out.println("Deleted");
                if (size == 0) {
                    head = null;
                    tail = null;
                }
            } else if (location >= size) {
                tail = tail.prev;
                tail.next = null;
                size = size - 1;
                System.out.println("Deleted");

                if (size == 0) {
                    head = null;
                    tail = null;
                }
            } else {
                Node tempNode = head;
                for (int i = 1; i < location - 1; i++) {
                    tempNode = tempNode.next;
                }
                tempNode.next = tempNode.next.next;
                tempNode.next.prev = tempNode;
                size = size - 1;
                System.out.println("Deleted");

            }

        }
        else{
            System.out.println("Linked List Doesnt Exist");
        }
    }
    
   public void deleteEntireList(){
        Node tempNode =head;
        for(int i=1; i<=size; i++){
            tempNode.prev=null;
            tempNode=tempNode.next;
        }
        head=null;
        tail=null;
        System.out.println("List Deleted");
    }
}

public class DoublyLinkedList {

    public static void main(String[] args) {
        DLL dll = new DLL();
        dll.create(10);
        System.out.println(dll.head.value);
        System.out.println("---------------");
        dll.insert(1, 1);
        System.out.println(dll.head.value);
        System.out.println(dll.head.next.value);
        System.out.println("---------------");
        dll.insert(2, 3);
        System.out.println(dll.head.value);
        System.out.println(dll.head.next.value);
        System.out.println(dll.head.next.next.value);
        System.out.println("---------------");
        dll.insert(3, 2);
        System.out.println(dll.head.value);
        System.out.println(dll.head.next.value);
        System.out.println(dll.head.next.next.value);
        System.out.println(dll.head.next.next.next.value);
        System.out.println("---------------");
        dll.traverse();
        System.out.println("---------------");
        dll.revTraversal();
        System.out.println("---------------");
        dll.search(10);
        System.out.println("---------------");
        dll.delete(1);
        dll.traverse();
        dll.delete(3);
        dll.traverse();
        System.out.println("---------------");
        dll.insert(2, 3);
        dll.traverse();
        System.out.println("---------------");
        dll.delete(2);
        dll.traverse();
        System.out.println("---------------");
        dll.deleteEntireList();

    }

}
